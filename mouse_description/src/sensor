#!/usr/bin/env python3
import rospy
import numpy as np

from mouse_description.msg import SensorData
from gazebo_msgs.msg import ContactsState
from sensor_msgs.msg import Image

# Aggregates color and bumper data from sensors

AVERAGE = 3
leftBump = [False] * AVERAGE
rightBump = [False] * AVERAGE
leftFrontBump = [False] * AVERAGE
rightFrontBump = [False] * AVERAGE

outData = SensorData()

def bumperCallback(data):
	if data.header.frame_id == 'left_bump':
		leftBump.append(len(data.states) > 0)
		leftBump.pop(0)
	elif data.header.frame_id == 'right_bump':
		rightBump.append(len(data.states) > 0)
		rightBump.pop(0)
	elif data.header.frame_id == 'left_front_bump':
		leftFrontBump.append(len(data.states) > 0)
		leftFrontBump.pop(0)
	elif data.header.frame_id == 'right_front_bump':
		rightFrontBump.append(len(data.states) > 0)
		rightFrontBump.pop(0)
	else:
		rospy.logerr('Received malformed bumper data!')

def cameraCallback(data):
	if data.encoding != 'rgb8':
		return

	# assumes box is blue and takes up entire vertical view
	# column is matched as box by seeing if pixels are just blue

	img = np.frombuffer(data.data, dtype=np.uint8).astype(np.int32)
	img = img.reshape((data.height, data.width, 3))
	img = img[:data.height//2,:,:] # keep only top half
	img = np.sum(img, axis=0) # add pixels in a column
	img[:,:2] *= -1 # negatively weight R and G subpixels
	img = np.sum(img, axis=1) # sum pixels
	img = img > ((data.height // 2) * 255 // 4) # if >1/4 max then blue

	outData.colorLength = data.width
	outData.color = list(img.astype(np.uint8))

def main():
	ns = rospy.get_namespace()
	rospy.Subscriber(ns + 'bumper', ContactsState, bumperCallback)
	rospy.Subscriber(ns + 'image_raw', Image, cameraCallback)
	pub = rospy.Publisher(ns + 'sensor_data', SensorData, queue_size=10)

	r = rospy.Rate(30)
	while not rospy.is_shutdown():
		# collision sensors not very clean
		outData.leftBump = any(leftBump)
		outData.rightBump = any(rightBump)
		outData.leftFrontBump = any(leftFrontBump)
		outData.rightFrontBump = any(rightFrontBump)

		pub.publish(outData)
		r.sleep()

if __name__ == '__main__':
	rospy.init_node('sensor')
	try:
		main()
	except rospy.ROSInterruptException:
		pass